macro plot s pic=0 norm=1 save=0

  nrm1=RESISTANCE;nrm2=VOLTAGE;nrm0=nrm1
  lab1='VOLTAGE SECTOR '//[s]//';CHANNEL;SLOT'
  lab2='CURRENT SECTOR '//[s]//';CHANNEL;SLOT'
  lab3='NORMALIZED '//[nrm[norm]]//' SECTOR '//[s]//';CHANNEL;SLOT'
  2d 101 [lab1] 24 0. 24. 9 0. 9. 0.
  2d 102 [lab2] 24 0. 24. 9 0. 9. 0.
  2d 103 [lab3] 24 0. 24. 9 0. 9. 0.
  exe get.pv.map3 [s] MV ; put_vect/contents 101 mv[s]
  exe get.pv.map3 [s] MI ; put_vect/contents 102 mi[s]

  opt nbox ; opt date 
  set yhti 0.8 ; set asiz 0.3 ; set vsiz 0.2 ; set ndvx 24 ; set ndvy 16
  title_gl 'ECAL HV MAP' ; set ygti 0.5 ; set gsiz 0.5
  min 101 1200. ; min 102 250.
  zone 1 3
  hi/plot 101 colz ; hi/plot 101 texts
  hi/plot 102 colz ; hi/plot 102 texts
  sigma r[s]=mv[s]/mi[s]/4.2
  if [save].eq.1 then ; vec/write r[s]  $exec(get.path [s])/r[s].vec 
                        vec/write mv[s] $exec(get.path [s])/mv[s].vec ; endif
  z1=0.8 ; z2=1.2
  case [norm] in
    (1) vec/read nr $exec(get.path [s])/r[s].vec  ; sigma r[s]=r[s]/nr  ;z1=0.98 ;z2=1.02
    (2) vec/read nr $exec(get.path [s])/mv[s].vec ; sigma r[s]=mv[s]/nr ;z1=0.995;z2=1.005
  endcase
  put_vect/contents 103 r[s]
  min 103 [z1] ; max 103 [z2] ; hi/plot 103 colz 
  if [pic].eq.1 then ; exe pic [s] ; endif
  hi/del 101,102,103 ; vec/del r[s],mv[s],mi[s],nr

return

macro pic s

  message LEFT CLICK TO SELECT CHANNEL, RIGHT CLICK TO RETURN VALUE
  message RIGHT CLICK ON WHITE AREA TO EXIT

  global/imp rmap1*
10:
  vlocate x y 
  if $vexist(x).eq.0 then ; exitm ; endif
  slot=$sigma(int(y(1))) ; chan=$sigma(int(x(1)))
  message ECAL CHANNEL = [rmap1([s]_Sl[slot]_Ch[chan])] _
          HV=$eval(mv[s]([chan]+1,[slot]+1)) V _
          IB=$eval(mi[s]([chan]+1,[slot]+1)) uA
  vec/del x,y
  goto 10

return

macro get.pv prop

* Property values
* MV=monitored voltage DV=demand voltage MI=monitored current

  case [prop] in
    (MV) p=.F
    (DV) p=_v0set
    (ED) p=.K
    (MI) p=.E
    (ST) p=.L
    (CL) p=_i0set
    (TR) p=_trip
    (RU) p=_rampup
    (RD) p=_rampdn
    (PO) p=_pwonoff
  endcase

return [p]

macro do.caget string vec

* -t allows caget to read a string of property values
* e.g.- caget -t 'pv1 pv2 pv3 ...'

  command = caget -t $unquote([string])
  vec/inp [vec](:) $unquote($shell([command],' '))
  
return

macro get.pv.map3 s prop n1=1 n2=216

  stat=$exec(map.exist [s]) 

  if [stat].ne.0 then ; global/imp map3* ; else ; exitm ; endif

  vec=[prop][s]
  vec/cre [vec](24,9) r
  vec/cre nr(24,9) r 216*1.0

  string = ''
  p=$exec(get.pv [prop])

  do n=[n1],[n2]
    pv  = B_HVECAL[map3([n])][p]
    string = [string]//' '//[pv]
  enddo

  exe do.caget [string] [vec]

return 

macro get.pv.map2 s prop l1=1 l2=1

  stat=$exec(map.exist [s]) 

  if [stat].ne.0 then ; global/imp map2* ; else ; exitm ; endif

  vec=[prop][s]

  pm1=36 ; pm2=36 ; pm3=36 ; pm4=36 ; pm5=36 ; pm6=36

  p=$exec(get.pv [prop]) 

  do lay=[l1],[l2]
  vec/cre [vec]([pm[lay]]) r
  string = ''
  do pm=1,[pm[lay]]
    pv  = B_HVECAL[map2([pm],[lay])][p]
    string = [string]//' '//[pv]
  enddo
  exe do.caget [string] [vec]
  enddo

return

macro get.path s

return cal/hv/ec/fc/s[s]

macro put.loadhv s=5 prop=DV l1=1 l2=1 tag=569

  stat=$exec(map.exist [s])

  if [stat].ne.0 then ; global/imp map2* ; else ; exitm ; endif

  pm1=36 ; pm2=36 ; pm3=36 ; pm4=36 ; pm5=36 ; pm6=36

  p=$exec(get.pv [prop]) 

  do lay=[l1],[l2]
  loadhv=loadhv[lay]-[tag]
  do pm=1,[pm[lay]]
    comm = caput B_HVECAL[map2([pm],[lay])][p] $eval(newhv([pm])) \n
    if [pm].gt.1 then ; command=[command][comm] ; else ; command=[comm] ; endif
  enddo
  path=$exe(get.path [s])
  message Writing [loadhv] to [path]
  txt='echo '//$quote([command])
  shell [txt] > [path]/[loadhv]
  enddo

  shell chmod a+x [path]/load*

return

macro map.exist s

  ms=$vexist(mapsec) ; maps=mapsec(1) 
  if ([ms].eq.1).and.([maps].eq.[s]) then
    message hvECAL#map.exist: Using existing map for sector [s]
    exitm 1
  else
    message hvECAL#map.exist: Recreating map for sector [s]
    exe get.map [s]
    exitm 2
  endif

return 

macro get.map s

  case [s] in
             (0) exe get.map.old [s]
   (1,2,3,4,5,6) exe get.map.new [s]
  endcase

return

macro get.map.old s

  message hvECAL#get.map.old: Creating map for sector [s]
  global/del map*,rmap*
  vec/cre mapsec(1) r [s]

* Three maps are created (sector s is always the last index):
* map1: Physical name (tag,s) where tag=(U,V,W)pm where pm=1-36(U) 1-36(V) 1-36(W)
* map2: Indexed name (pm,lay,s) where pm=same as map1 lay=1,6 (UI,UO,VI,VO,WI,WO)
* map3: Sequential (n,s) where n=1,216
* Usage: PAW>exe hvECAL#get.map s where s=sector number
* To examine map1: PAW>global/list map1* etc. 
* Reverse maps are also created (rmap*). 

  n1=36;n2=36;n3=36;n4=36;n5=36;n6=36
  l1=UI;l2=UO;l3=VI;l4=VO;l5=WI;l6=WO
  lay1=1;lay2=4;lay3=2;lay4=5;lay5=3;lay6=6
  pm=0;lay=1;n=0

  do slot=0,9
  do chan=0,23
    sl=[slot][chan]
    hvtag = [s]_Sl[slot]_Ch[chan]
    case [sl] in
    (712,713,714,715,716,717,718,719,720,721,722,723)
        tag=SPARE[sl]
    (912,913,914,915,916,917,918,919,920,921,922,923)
        tag=SPARE[sl]
    (*) pm=[pm]+1
        n=[n]+1
        if [pm].gt.[n[lay]] then ; pm=1 ; lay=[lay]+1 ; endif
        tag=[l[lay]][pm]
        hvmap = [pm],[lay[lay]]
        global/cre map2([hvmap]) [hvtag]
        global/cre rmap2([hvtag]) [hvmap]
    endcase
    hvmap = [tag]
    global/cre map1([hvmap]) [hvtag]
    global/cre rmap1([hvtag]) [hvmap]
    hvmap = [n]
    global/cre map3([hvmap]) [hvtag]
    global/cre rmap3([hvtag]) [hvmap]
  enddo
  enddo

return

macro get.map.new s

  message hvECAL#get.map.new: Creating map for sector [s]
  global/del map*,rmap*

  vec/cre mapsec(1) r [s]

* Three maps are created (sector s is always the last index):
* map1: Physical name (tag,s) where tag=(U,V,W)pm where pm=1-36(U) 1-36(V) 1-36(W)
* map2: Indexed name (pm,lay,s) where pm=same as map1 lay=1,6 (UI,UO,VI,VO,WI,WO)
* map3: Sequential (n,s) where n=1,216
* Usage: PAW>exe hvECAL#get.map s where s=sector number
* To examine map1: PAW>global/list map1* etc. 
* Reverse maps are also created (rmap*). 

  n1=36;n2=36;n3=36;n4=36;n5=36;n6=36
  l1=UI;l2=UO;l3=VI;l4=VO;l5=WI;l6=WO
  lay1=1;lay2=4;lay3=2;lay4=5;lay5=3;lay6=6
  pm=0;lay=1;n=0

  do slot=0,8
  do chan=0,23
    hvtag = [s]_Sl[slot]_Ch[chan]
    pm=[pm]+1 ; n=[n]+1
    if [pm].gt.[n[lay]] then ; pm=1 ; lay=[lay]+1 ; endif
    tag=[l[lay]][pm]
    hvmap = [pm],[lay[lay]]
    global/cre map2([hvmap]) [hvtag]
    global/cre rmap2([hvtag]) [hvmap]
    hvmap = [tag]
    global/cre map1([hvmap]) [hvtag]
    global/cre rmap1([hvtag]) [hvmap]
    hvmap = [n]
    global/cre map3([hvmap]) [hvtag]
    global/cre rmap3([hvtag]) [hvmap]
  enddo
  enddo

return
